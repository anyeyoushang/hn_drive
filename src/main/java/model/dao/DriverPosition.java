package model.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import other.utils.GetLocation;
import other.utils.SqlEntity;
import other.utils.SqlUtils;
import other.utils.ToolUtils;

import model.dao.inter.BaseModel;
import model.entity.BaseDriverPosition;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class DriverPosition extends BaseDriverPosition<DriverPosition> implements BaseModel {
	public static final DriverPosition dao = new DriverPosition();
	
	@Override
	public Object addDate(HashMap<String, Object> where) {
		return null;
	}

	@Override
	public Object deleteDate(HashMap<String, Object> where) {
		return null;
	}

	@Override
	public Object updateDate(HashMap<String, Object> where) {
		return null;
	}
	
	@Override
	public Object getDataList(HashMap<String, Object> where) {
		Integer page = Integer.valueOf( where.get("page").toString());
		Integer pageSize = Integer.valueOf(where.get("rows").toString());
		String sort = where.get("sort").toString();
		String order = where.get("order").toString();
		String sqlStr = "SELECT tu.userPhone,tu.userName,tdp.* FROM t_driver_position AS tdp LEFT JOIN t_user AS tu ON tdp.driverId = tu.userId ";
		SqlEntity sqlEntity = SqlUtils.appendWhere(sqlStr, where);
		List<Record> records = Db.find(sqlEntity.getSqlStr() + "order by " + sort + " " + order + " " 
				+  "limit " + (page - 1)*pageSize + ", " + pageSize, sqlEntity.getSqlParams());
		for(Record record : records){
			String address = GetLocation.getAddress(String.valueOf(record.get("lon")), String.valueOf(record.get("lat")));
			record.set("address", address);
		}
		
		Map<String, Object> pageData = new HashMap<String, Object>();
		pageData.put("rows", records);
		pageData.put("total", records.size());
		return pageData;
	}
	
	/**
	 * 查找该司机的位置记录
	 * @author wh
	 * @since 2016-11-23
	 * @param driverId
	 * @return 
	 */
	public DriverPosition findPositionRecord(String driverId) {
		String sql = "SELECT * FROM t_driver_position WHERE driverId = ?";
		return this.findFirst(sql, driverId);
	}

	/**
	 * 添加该司机的位置记录
	 * @author wh
	 * @since 2016-11-23
	 * @param params
	 */
	public void addDriverPosition(Map<String, Object> params) {
		this.set("positionId", ToolUtils.getUUID());
		this.put(params);
		this.save();
	}

	/**
	 * 修改该司机的位置记录
	 * @author wh
	 * @since 2016-11-23
	 * @param params
	 */
	public void updateDriverPosition(Map<String, Object> params) {
		Object driverId = params.get("driverId");
		Object lon = params.get("lon");
		Object lat = params.get("lat");
		DriverPosition driverPosition = findPositionRecord(driverId.toString());
		driverPosition.set("lon", lon);
		driverPosition.set("lat", lat);
		driverPosition.update();
	}

	/**
	 * 查询附近的司机
	 * @author wh
	 * @since 2016-11-23
	 * @param lon 用户的经度
	 * @param lat 用户的纬度
	 * @param distance 距离
	 * @return 
	 */
	public List<Record> findNearDriver(String lon, String lat, Integer distance) {
		StringBuffer sql = new StringBuffer();
		sql.append("select");
		sql.append(ToolUtils.yxPointSql(lon, lat, "lon", "lat", "distance"));
		sql.append(",t.*,tu.* from t_driver_position AS t LEFT JOIN t_user AS tu ON t.driverId = tu.userId");
		// sql.append(" HAVING distance <= 100");
		List<Record> records = Db.find(sql.toString());
		for(Record record : records){
			double grade = Comment.dao.findDriverGrade(record.get("driverId").toString());
			record.set("grade", grade);
		}
		return records;
	}

	
	
	
	
	
	
	
	
	
	
	
}
