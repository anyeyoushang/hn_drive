package model.dao;

import java.util.HashMap;
import java.util.List;

import model.dao.inter.BaseModel;
import model.entity.BaseOrder;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Order extends BaseOrder<Order> implements BaseModel {
	public static final Order dao = new Order();
	
	public enum OrderStateEnum {
		下单, 已接单, 支付完成
	}
	
	public enum UserDeleteEnum {
		未删除, 已删除
	}
	
	public enum DriverDeleteEnum {
		未删除, 已删除
	}
	
	public enum PushStateEnum {
		推送订单,
		司机接单,
		线上支付,
		线下支付,
		支付完成
	}
	
	public enum WhoPayEnum {
		线下支付, 线上支付
	}
	
	public enum OrderTypeEnum {
		普通订单, 司机报单
	}
	
	@Override
	public Object addDate(HashMap<String, Object> where) {
		return null;
	}

	@Override
	public Object deleteDate(HashMap<String, Object> where) {
		return null;
	}

	@Override
	public Object updateDate(HashMap<String, Object> where) {
		return null;
	}
	
	@Override
	public Object getDataList(HashMap<String, Object> where) {
		return null;
	}
	
	/**
	 * 查询该用户没有删除的订单中是否有未完成的订单
	 * @author wh
	 * @since 2016-12-14
	 * @param userId
	 * @return 
	 */
	public Order findUserMarchOrder(String userId) {
		String sql = "SELECT * FROM t_order WHERE userId = ? AND userDeleteState = ? AND orderState = ?";
		return this.findFirst(sql, userId, UserDeleteEnum.未删除.ordinal(), OrderStateEnum.已接单.ordinal());
	}

	/**
	 * 查询该司机没有删除的订单中是否有未完成的订单
	 * @author wh
	 * @since 2016-12-14
	 * @param driverId
	 * @return 
	 */
	public Order findDriverMarchOrder(String driverId) {
		String sql = "SELECT * FROM t_order WHERE driverId = ? AND driverDeleteState = ? AND orderState = ?";
		return this.findFirst(sql, driverId, DriverDeleteEnum.未删除.ordinal(), OrderStateEnum.已接单.ordinal());
	}

	/**
	 * 用户查询订单
	 * @author wh
	 * @since 2016-12-16
	 * @param userId
	 * @param type 
	 * @return 
	 */
	public List<Order> findUserOrder(String userId, String type) {
		String sql = "";
		if(type.equals("user")){
			sql += "SELECT * FROM t_order WHERE userId = ? AND userDeleteState = ?";
		}else if(type.equals("driver")){
			sql += "SELECT * FROM t_order WHERE driverId = ? AND driverDeleteState = ?";
		}
		sql += " order by addOrderTime desc";
		return this.find(sql, userId, UserDeleteEnum.未删除.ordinal());
	}

	/**
	 * 删除订单
	 * @author wh
	 * @since 2016-12-19
	 * @param orderIds
	 * @param type 
	 * @return
	 */
	public boolean delUserOrder(String[] orderIds, String type) {
		for(String orderId : orderIds){
			Order order = this.findById(orderId);
			if(type.equals("user")){
				order.setUserDeleteState(UserDeleteEnum.已删除.ordinal());
			}else if(type.equals("driver")){
				order.setDriverDeleteState(DriverDeleteEnum.已删除.ordinal());
			}
			order.update();
		}
		return true;
	}

	/**
	 * 查询订单详情
	 * @author wh
	 * @since 2016-12-19
	 * @param orderId
	 * @return
	 */
	public Order findOrderDetail(String orderId) {
		String sql = "SELECT o.*,u.userName,u.userPhone,d.userName AS driverName,d.userPhone AS"; 
		sql += " driverPhone,tc.grade FROM t_order AS o LEFT JOIN t_user AS u ON o.userId = u.userId";
		sql += " LEFT JOIN t_user AS d ON o.driverId = d.userId LEFT JOIN t_comment AS tc ON";
		sql += " o.orderId = tc.orderId WHERE o.orderId = ?";
		return this.findFirst(sql, orderId);
	}

	

	
	
	

	
}
